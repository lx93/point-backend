'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.Request = Request;

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _exceptions = require('../utils/exceptions');

var Exceptions = _interopRequireWildcard(_exceptions);

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Request(config) {
  var auth = 'Basic ' + new Buffer(config.authId + ':' + config.authToken).toString('base64');

  var headers = {
    Authorization: auth,
    'User-Agent': config.userAgent,
    'Content-Type': 'application/json'
  };

  return function (method, action, params) {
    var options = {
      url: config.url + '/' + action,
      method: method,
      formData: params || '',
      headers: headers,
      json: true
    };

    if (method === 'GET' && options.formData !== '') {
      var query = '?' + _querystring2.default.stringify(params);
      options.url += query;
    }

    if (typeof config.proxy !== 'undefined') {
      options.proxy = config.proxy;
    }

    if (typeof config.timeout !== 'undefined') {
      options.timeout = config.timeout;
    }

    return new Promise(function (resolve, reject) {
      (0, _request2.default)(options, function (error, response, body) {
        if (error) {
          reject(error);
          return;
        }

        var exceptionClass = {
          400: Exceptions.InvalidRequestError,
          401: Exceptions.AuthenticationError,
          404: Exceptions.ResourceNotFoundError,
          405: Exceptions.InvalidRequestError,
          500: Exceptions.ServerError
        }[response.statusCode] || Error;

        if (!_.inRange(response.statusCode, 200, 300)) {
          body = body || response.body;
          if ((typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object') {
            reject(new exceptionClass(JSON.stringify(body)));
          } else {
            reject(new exceptionClass(body));
          }
        } else {
          var _body = response.body;
          resolve({ response: response, body: _body });
        }
      });
    });
  };
}